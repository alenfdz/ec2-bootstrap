# Install cfn tools based on the operating system type
function td_cfn_install(){
        td_get_ostype OSTYPE
        td_get_osversion OSVERSION

        echo "[Installing aws-cfn-bootstrap]"
        if [  "$OSTYPE" == 'amzn' ] && [ "$OSVERSION" == "2" ]; then
                sudo yum install -y aws-cfn-bootstrap
                sudo yum install -y python3-pip
                export PATH=$PATH:/opt/aws/bin
        elif [ "$OSTYPE" == 'amzn' ]; then
                sudo yum install -y aws-cfn-bootstrap
                sudo yum install -y python3-pip
                export PATH=$PATH:/opt/aws/bin
        elif [ "$OSTYPE" == "ubuntu" ] && [ "$OSVERSION" == "18.04" ]; then
                sudo apt-get update -y
                sudo apt-get install python-pip -y
                sudo pip2 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
        elif [ "$OSTYPE" == "ubuntu" ] && [ "$OSVERSION" == "16.04" ]; then
                sudo apt-get update -y
                sudo apt-get install python2.7 python-pip -y
                sudo pip2 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
        elif [ "$INSTANCE_OSTYPE" == "sles" ]; then
            zypper -n refresh && zypper -n update
            zypper -n install python2-pip
            pip2.7 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
        elif [ "$INSTANCE_OSTYPE" == "centos" ]; then
            yum update -y
            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
        else
                exit 1
        fi
}

# Get operating system version based on the contents of /etc/*-release files, or return 1
function td_get_ostype() {
    FILES="/etc/*-release"
    if [[ $(ls ${FILES}) ]]; then
        OS=$( cat ${FILES} | grep ^ID= | awk -F= '{print $2}' | tr -cd [:alpha:])
        if [ "${OS}" == "ol" ];then
            OS="rhel"
        fi
        if [ $? -eq 0 ];then
            eval $1="${OS}"
            return 0
        elif [ $OS ]; then
            echo $OS
            return 0;
        else
             echo "Unknown"
        fi
    else
        $1="Unknown"
        return 1
    fi
}

# Get the operating system version based on the contents of /etc/*-release, or return 1
function td_get_osversion () {
    FILES="/etc/*-release"
    if [[ $(ls ${FILES})  ]]; then
        OSLEVEL=$(cat ${FILES} | grep VERSION_ID | tr -d \" | awk -F= '{print $2}')

        if [ $? -eq 0 ] ;then
            eval $1="${OSLEVEL}"
            return 0
        else
            $1="Unknown"
            return 1
        fi
    else
        $1="Unknown"
        return 1;
    fi
}

# Update the operating system based on the type and release
# exit  code 1
function td_updateos() {
    # Get operating system type
    td_get_ostype OSTYPE

    echo "[INFO] Start OS Updates"
    if [ "$OSTYPE" == "amzn" ]; then
        yum update -y
    elif [ "$OSTYPE" == "ubuntu" ]; then
        apt update -y
    elif [ "$OSTYPE" == "rhel" ]; then
        yum update -y
    elif [ "$OSTYPE" == "centos" ]; then
        yum update -y
    elif [ "$OSTYPE" == "fedora" ]; then
        dnf update -y
    elif [ "$OSTYPE" == "sles" ]; then
        zypper -n refresh && zypper -n update
    else
        exit 1
    fi
    echo "[INFO] OS Updated"
}
  